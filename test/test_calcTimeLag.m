function test_calcTimeLag()
% Unit test for calcTimeLag function
%
% Author: Dr. Tanuj Puri
% Date:   01/2014
% Warning: This is an untested code/implementation and should be used
%            with caution in clinical and pre-clinical settings. The author takes no 
%            responsibility of any kind about the output results from this code.
%
  fprintf('\nRunning test_calcTimeLag() ...\n');
  
  % Define test cases as struct array
  testCases = {
      % --- Valid cases ---
      struct('name', 'Equal Start Times (Lag 0)', ...
             'time', 0:10, ...
             'Ct', [0 0 1 1 1 5 6 7 8 9 10], ...
             'Cp', [0 0 1 1 1 3 4 5 6 7 8], ...
             'expected', 0), ...
  
      struct('name', 'Lag of 2 units', ...
             'time', 0:10, ...
             'Ct', [0 0 0 1 1 1 3 4 5 6 7], ...
             'Cp', [0 1 1 1 4 5 6 7 8 9 10], ...
             'expected', 2), ...
  
      % --- Invalid cases (should error) ---
      struct('name', 'Cp starts after Ct (Invalid)', ...
             'time', 0:10, ...
             'Ct', [0 1 1 1 3 4 5 6 7 8 9], ...
             'Cp', [0 0 0 1 1 1 3 4 5 6 7], ...
             'expectError', true), ...
  
      struct('name', 'Length Mismatch', ...
             'time', 0:9, ...
             'Ct', ones(1,10), ...
             'Cp', ones(1,11), ...
             'expectError', true), ...
  
      struct('name', 'Non-vector time input', ...
             'time', reshape(0:10, [11 1 1]), ...
             'Ct', ones(1,11), ...
             'Cp', ones(1,11), ...
             'expectError', true), ...
  
      struct('name', 'NaN in Ct', ...
             'time', 0:10, ...
             'Ct', [0 0 NaN 1 1 1 1 1 1 1 1], ...
             'Cp', [0 1 1 1 1 1 1 1 1 1 1], ...
             'expectError', true), ...
  
      struct('name', 'Inf in Cp', ...
             'time', 0:10, ...
             'Ct', [0 0 1 1 1 2 3 4 5 6 7], ...
             'Cp', [0 0 Inf 1 1 2 3 4 5 6 7], ...
             'expectError', true), ...
  
      struct('name', 'Negative values in Cp', ...
             'time', 0:10, ...
             'Ct', [0 0 1 1 1 3 4 5 6 7 8], ...
             'Cp', [0 0 -1 1 1 3 4 5 6 7 8], ...
             'expectError', true), ...
  };
  
  % Run tests
  for i = 1:numel(testCases)
      disp("------")
      tc = testCases{i};
      
      % disp(['Cp: ', num2str(tc.Cp)]);
      % disp(['Ct: ', num2str(tc.Ct)]);
      % disp(['time: ', num2str(tc.time)]);
  
      try
          result = calcTimeLag(tc.time, tc.Ct, tc.Cp);
          if isfield(tc, 'expectError') && tc.expectError
              fprintf('FAIL: %s -- Expected error, but none was thrown.\n', tc.name);
          elseif abs(result - tc.expected) < 1e-8
              fprintf('PASS: %s\n', tc.name);
          else
              fprintf('FAIL: %s -- Expected %.4f, got %.4f\n', tc.name, tc.expected, result);
          end
      catch ME
          if isfield(tc, 'expectError') && tc.expectError
              fprintf('PASS (Error as expected): %s -- %s\n', tc.name, ME.message);
          else
              fprintf('FAIL: %s -- Unexpected error: %s\n', tc.name, ME.message);
          end
      end
  end
  
  fprintf('Done.\n');

end
