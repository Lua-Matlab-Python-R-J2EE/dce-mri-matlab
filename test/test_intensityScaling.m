function test_intensityScaling()
% TEST_INTENSITYSCALING: Unit tests for the intensityScaling function.
% This function checks a variety of valid and invalid scenarios to ensure the function behaves correctly.
%
% Author: Dr. Tanuj Puri
% Date:   01/2014
% Warning: This is an untested code/implementation and should be used
% with caution in clinical and pre-clinical settings. The author takes no 
% responsibility of any kind about the output results from this code.
%
    fprintf('Running test_intensityScaling()...\n');

    testCases = [...
        % === VALID TESTS ===
        struct('x', [0 50; 100 150], 'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', false, 'desc', 'Normal case - within window'); ...
        struct('x', [0 50; 100 200], 'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 1,   'shouldError', false, 'desc', 'yMin/yMax in [0,1]'); ...
        struct('x', zeros(5),       'wC', 50,  'wW', 20,  'yMin', 0, 'yMax', 255, 'shouldError', false, 'desc', 'All values below window'); ...
        struct('x', ones(5)*200,    'wC', 100, 'wW', 20,  'yMin', 0, 'yMax', 255, 'shouldError', false, 'desc', 'All values above window'); ...
        struct('x', [80 90; 100 110], 'wC', 100, 'wW', 40, 'yMin', 0, 'yMax', 255, 'shouldError', false, 'desc', 'All values within window'); ...

        % === INVALID INPUTS ===
        struct('x', [0 1; NaN 1],   'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'Contains NaN'); ...
        struct('x', [0 1; Inf 1],   'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'Contains Inf'); ...
        struct('x', [0 1; 1+1i 1],  'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'Contains complex value'); ...
        struct('x', 'not an image', 'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'Non-numeric x'); ...
        struct('x', rand(3,3,3),    'wC', 100, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', '3D input image'); ...
        struct('x', [0 1; 1 1],     'wC', NaN, 'wW', 100, 'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'wC is NaN'); ...
        struct('x', [0 1; 1 1],     'wC', 50,  'wW', 0,   'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'wW = 0'); ...
        struct('x', [0 1; 1 1],     'wC', 50,  'wW', -5,  'yMin', 0, 'yMax', 255, 'shouldError', true, 'desc', 'wW < 0'); ...
        struct('x', [0 1; 1 1],     'wC', 50,  'wW', 10,  'yMin', 255, 'yMax', 0, 'shouldError', true, 'desc', 'yMax < yMin'); ...
        struct('x', [0 1; 1 1],     'wC', 50,  'wW', 10,  'yMin', 0, 'yMax', Inf, 'shouldError', true, 'desc', 'yMax is Inf'); ...
        struct('x', [0 1; 1 1],     'wC', 50,  'wW', 10,  'yMin', 0, 'yMax', NaN, 'shouldError', true, 'desc', 'yMax is NaN'); ...
    ];

    for i = 1:length(testCases)
        tc = testCases(i);
        try
            y = intensityScaling(tc.x, tc.wC, tc.wW, tc.yMin, tc.yMax);
            if tc.shouldError
                fprintf('Test %2d FAILED (Expected error, got success): %s\n', i, tc.desc);
            else
                fprintf('Test %2d PASSED: %s\n', i, tc.desc);
            end
        catch ME
            if tc.shouldError
                fprintf('Test %2d PASSED (Caught expected error): %s\n', i, tc.desc);
            else
                fprintf('Test %2d FAILED (Unexpected error: %s): %s\n', i, ME.message, tc.desc);
            end
        end
    end
end% main test function ends
